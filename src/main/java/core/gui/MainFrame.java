/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package core.gui;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import models.Domain;
import models.IPv4Test;
import models.IPv6Test;
import util.DatabaseHelper;
import util.Ping;
import util.Ping.PingMethod;

public class MainFrame extends javax.swing.JFrame
{
	/**
	 * Creates new form MainFrame
	 */
	public MainFrame()
	{
		initComponents();
		setApplicationIcon();
		updateUrlList();

		try
		{
			//If we can't ping via ipv6, prevent it
			Ping.ping( "google.com", PingMethod.IPv6 );
		}
		catch( final IOException ex )
		{
			mHasIPv6 = false;
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        lblUrlList = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTests = new javax.swing.JTable();
        btnStartTest = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstUrls = new javax.swing.JList<>( new DefaultListModel() );
        btnAddUrls = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Website Sniffer");

        lblUrlList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUrlList.setForeground(new java.awt.Color(51, 51, 0));
        lblUrlList.setText("URL List");

        tblTests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "URL", "IPv4 Address", "IPv4 Location", "IPv4 MX Address", "IPv4 MX Location", "IPv4 Ping", "IPv4 Status Code", "IPv4 Has Working SMTP", "IPv6 Address", "IPv6 Location", "IPv6 MX Address", "IPv6 MX Location", "IPv6 Ping", "IPv6 Status Code", "IPv6 Has Working SMTP"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblTests.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblTests.setAutoscrolls(false);
        tblTests.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblTests.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblTests);

        btnStartTest.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        btnStartTest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network-icon.png"))); // NOI18N
        btnStartTest.setText("Start Test");
        btnStartTest.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnStartTestActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(lstUrls);

        btnAddUrls.setText("Add URLs");
        btnAddUrls.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddUrlsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAddUrls)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStartTest, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addComponent(lblUrlList, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUrlList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStartTest, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addComponent(btnAddUrls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartTestActionPerformed
		new SwingWorker<Void, Void>()
		{
			@Override
			protected Void doInBackground() throws Exception
			{
				// Simulate doing something useful.
				disableButtons();
				performTests();
				enableButtons();
				return null;
			}
		}.execute();
    }//GEN-LAST:event_btnStartTestActionPerformed

    private void btnAddUrlsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddUrlsActionPerformed
    {//GEN-HEADEREND:event_btnAddUrlsActionPerformed
		final JFileChooser fileChooser = new JFileChooser();

		int rVal = fileChooser.showOpenDialog( this );
		if( rVal == JFileChooser.APPROVE_OPTION )
		{
			addUrlsFromFile( fileChooser.getSelectedFile() );
		}
    }//GEN-LAST:event_btnAddUrlsActionPerformed

	public static void main( final String args[] )
	{
		/* Create and display the form */
		java.awt.EventQueue.invokeLater( ()
				-> 
				{
					try
					{
						UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName() );
					}
					catch( final ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e )
					{
					}

					new MainFrame().setVisible( true );
		} );
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUrls;
    private javax.swing.JButton btnStartTest;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblUrlList;
    private javax.swing.JList<String> lstUrls;
    private javax.swing.JTable tblTests;
    // End of variables declaration//GEN-END:variables

	private static boolean mHasIPv6 = true;

	private void disableButtons()
	{
		btnStartTest.setEnabled( false );
		btnAddUrls.setEnabled( false );
	}

	private void enableButtons()
	{
		btnStartTest.setEnabled( true );
		btnAddUrls.setEnabled( true );
	}

	private void setApplicationIcon()
	{
		setIconImage( Toolkit.getDefaultToolkit().getImage( getClass().getResource( "/icon.png" ) ) );
	}

	private void performTests()
	{
		try
		{
			final ExecutorService executor = Executors.newFixedThreadPool( 50 );
			final List<Domain> domains = DatabaseHelper.getInstance().getAllDomains();
			final DefaultTableModel dtm = (DefaultTableModel) tblTests.getModel();
			for( int i = 0; i < domains.size(); i++ )
			{
				final Domain domain = domains.get( i );
				final int rowNum = i;

				dtm.addRow( new Object[]
				{
					domain.getUrl()
				} );

				executor.execute( new Runnable()
				{
					@Override
					public void run()
					{
						final IPv4Test ipv4Test = new IPv4Test( domain );
						try
						{
							int columnNum = dtm.findColumn( "IPv4 Address" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv4Test.getAddress(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv4 Location" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv4Test.getAddressLocation(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv4 MX Address" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv4Test.getMxAddress(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv4 MX Location" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv4Test.getMxAddressLocation(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv4 Ping" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv4Test.getPing(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv4 Status Code" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv4Test.getHttpStatusCode(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv4 Has Working SMTP" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv4Test.hasWorkingSMTP(), rowNum, columnNum );

							final IPv6Test ipv6Test = new IPv6Test( domain );
							columnNum = dtm.findColumn( "IPv6 Address" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv6Test.getAddress(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv6 Location" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv6Test.getAddressLocation(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv6 MX Address" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv6Test.getMxAddress(), rowNum, columnNum );

							columnNum = dtm.findColumn( "IPv6 MX Location" );
							dtm.setValueAt( "...", rowNum, columnNum );
							dtm.setValueAt( ipv6Test.getMxAddressLocation(), rowNum, columnNum );

							if( mHasIPv6 )
							{
								columnNum = dtm.findColumn( "IPv6 Ping" );
								dtm.setValueAt( "...", rowNum, columnNum );
								dtm.setValueAt( ipv6Test.getPing(), rowNum, columnNum );

								columnNum = dtm.findColumn( "IPv6 Status Code" );
								dtm.setValueAt( "...", rowNum, columnNum );
								dtm.setValueAt( ipv6Test.getHttpStatusCode(), rowNum, columnNum );

								columnNum = dtm.findColumn( "IPv6 Has Working SMTP" );
								dtm.setValueAt( "...", rowNum, columnNum );
								dtm.setValueAt( ipv6Test.hasWorkingSMTP(), rowNum, columnNum );

								DatabaseHelper.getInstance().insertTest( ipv6Test, models.IPTest.Type.IPv6 );
							}

							DatabaseHelper.getInstance().insertTest( ipv4Test, models.IPTest.Type.IPv4 );
						}
						catch( final SQLException ex )
						{
							Logger.getLogger( MainFrame.class.getName() ).log( Level.SEVERE, null, ex );
						}
					}
				} );
			}

			//Hack to block the main thread until finished
			executor.shutdown();
			try
			{
				executor.awaitTermination( Long.MAX_VALUE, TimeUnit.DAYS );
			}
			catch( final InterruptedException e )
			{
			}
		}
		catch( final SQLException ex )
		{
			Logger.getLogger( MainFrame.class.getName() ).log( Level.SEVERE, null, ex );
		}
	}

	private void addUrlsFromFile( final File file )
	{
		try( final FileReader fileReader = new FileReader( file );
			 final BufferedReader reader = new BufferedReader( fileReader ) )
		{
			final List<String> domains = new ArrayList<>();

			String line;
			while( ( line = reader.readLine() ) != null )
			{
				domains.add( line );
			}

			DatabaseHelper.getInstance().insertDomains( domains );
			updateUrlList();
		}
		catch( final IOException | SQLException ex )
		{
			Logger.getLogger( MainFrame.class.getName() ).log( Level.SEVERE, null, ex );
		}
	}

	private void updateUrlList()
	{
		try
		{
			final List<Domain> domains = DatabaseHelper.getInstance().getAllDomains();
			final DefaultListModel listModel = (DefaultListModel) lstUrls.getModel();

			listModel.clear();
			for( final Domain domain : domains )
			{
				listModel.addElement( domain.getUrl() );
			}
		}
		catch( final SQLException ex )
		{
			Logger.getLogger( MainFrame.class.getName() ).log( Level.SEVERE, ex.getMessage(), ex );
		}
	}
}
